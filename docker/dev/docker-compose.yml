version: '2.2'

volumes:
    postgres_data:

networks:
  app-tier:
    driver: bridge

services:
    web:
      build:
        context: ../../
        dockerfile: docker/dev/Dockerfile
      container_name: Web
      entrypoint: ["wait.sh"]
      restart: always
      command: [
        "python",
        "manage.py",
        "runserver",
        "0.0.0.0:8000"
        ]
      depends_on:
        db:
          condition: service_healthy
      volumes:
        - ../../.:/usr/src/django
      ports:
        - 3000:3000
        - 8000:8000
      env_file:
        - env/dev.env
      working_dir: /usr/src/django/src
      networks:
        - app-tier

    db:
      container_name: db
      image: postgres:13.7
      volumes:
        - postgres_data:/var/lib/postgresql/data/
      env_file:
        - env/db.env
      ports:
            - "5432:5432"
      healthcheck:
        test: ["CMD-SHELL", "sh -c 'pg_isready'"]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - app-tier

    debug:
      build:
        context: ../../
        dockerfile: docker/dev/Dockerfile
      container_name: Debug
      entrypoint: ["wait.sh"]
      ports:
        - "5678:5678"
      command: [
        "python",
        "-m",
        "debugpy",
        "--listen",
        "0.0.0.0:5678",
        "--wait-for-client",
        "-m",
        "pytest",
        "delta_x/api/accounts/test/test_view.py::TestTransferViewSet"
        ]
      volumes:
        - ../../.:/usr/src/django
      env_file:
        - env/dev.env
      working_dir: /usr/src/django/src
      networks:
        - app-tier

    celery:
      build:
        context: ../../
        dockerfile: docker/dev/Dockerfile
      container_name: Celery
      entrypoint: ["wait.sh"]
      restart: always
      command: [
        "python",
        "-m",
        "celery",
        "-A",
        "settings",
        "worker",
        "-l",
        "INFO",
        "--autoscale=10,3"
        ]
      # command: cd src/ && python -m celery -A settings worker
      depends_on:
        redis:
          condition: service_started
        celery-beat:
          condition: service_started
        web:
          condition: service_started
      volumes:
        - ../../.:/usr/src/django
      env_file:
        - env/dev.env
      working_dir: /usr/src/django/src
      networks:
        - app-tier

    celery-beat:
      build:
        context: ../../
        dockerfile: docker/dev/Dockerfile
      container_name: Celery-beat
      entrypoint: ["wait.sh"]
      restart: always
      command: [
        "python",
        "-m",
        "celery",
        "-A",
        "settings",
        "beat",
        "-l",
        "info",
        "--scheduler",
        "django_celery_beat.schedulers:DatabaseScheduler",
        "--pidfile="
        ]
      volumes:
        - ../../.:/usr/src/django
      env_file:
        - env/dev.env
      working_dir: /usr/src/django/src
      networks:
        - app-tier

    redis:
      image: redis
      container_name: Redis
      ports:
            - "15672:15672"
            - "5672:5672"
      healthcheck:
        test: ["CMD", "redis-cli","ping"]
        interval: 1s
        timeout: 3s
        retries: 5
      networks:
        - app-tier

    tensorflow-serving:
      image: bitnami/tensorflow-serving:latest
      volumes:
        - "../../src/tensoflow/python/model/img_classifier:/bitnami/model-data"
      ports:
        - '8500:8500'
        - '8501:8501'
      networks:
        - app-tier

    notebook:
      build:
        context: ../../
        dockerfile: docker/dev/Dockerfile
      container_name: Notebook
      restart: always
      command: [
        "jupyter",
        "notebook",
        "--ip",
        "0.0.0.0",
        "--port",
        "9999",
        "--allow-root",
        "--no-browser"
        ]
      ports:
        - "9999:9999"
      volumes:
        - ../../.:/usr/src/django
      env_file:
        - env/dev.env
      working_dir: /usr/src/django/src
      networks:
        - app-tier
